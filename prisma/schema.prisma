// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Experience {
  id            String    @id @default(cuid())
  companyLogo   String    // URL
  title         String
  startDate     DateTime
  endDate       DateTime? // Nullable for "Present" cases
  companyName   String
  responsibilities Responsibility[]
  portfolio    Portfolio?     @relation(fields: [portfolioId], references: [id])
  portfolioId  String?
}

model Responsibility {
  id         String   @id @default(cuid())
  content    String
  experience Experience @relation(fields: [experienceId], references: [id])
  experienceId String
}

model FeaturedProject {
  id          String   @id @default(cuid())
  title       String
  imageURL    String
  description String
  techList    String // Must be comma seperated since SQLITE doesnt support arrays
  githubLink  String
  deployedLink String
  portfolio    Portfolio?     @relation(fields: [portfolioId], references: [id])
  portfolioId  String?
}

model OtherProject {
  id          String   @id @default(cuid())
  title       String
  description String
  techList    String // Must be comma seperated since SQLITE doesnt support arrays
  githubLink  String
  deployedLink String
  portfolio    Portfolio?     @relation(fields: [portfolioId], references: [id])
  portfolioId  String?
}

model Portfolio {
  id                  String            @id @default(cuid())
  heroSectionContent  String
  aboutSectionContent String
  experienceSection   Experience[] 
  featuredProjects    FeaturedProject[] 
  otherProjects       OtherProject[] 
  contactEmail        String
  authorName          String
  cvLink              String
}